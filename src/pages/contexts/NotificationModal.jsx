// src/components/NotificationModal/NotificationModal.jsx
import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { useNotifications } from '../../pages/contexts/NotificationContext.jsx'; // Ajuste o caminho conforme a sua estrutura
import './NotificationModal.css'; // O CSS para o modal

// Este componente agora √© o modal centralizado
export default function NotificationModal({ isOpen, onClose }) {
    const { notifications, markAsRead, removeNotification, addNotification } = useNotifications();
    const navigate = useNavigate();
    const [expandedNotificationId, setExpandedNotificationId] = useState(null);
    const modalContentRef = useRef(null); // Ref para o conte√∫do do modal

    // Adiciona notifica√ß√£o de teste inicial se n√£o houver nenhuma
    useEffect(() => {
        if (notifications.length === 0) {
            console.log("Adicionando notifica√ß√µes de teste no modal...");
            addNotification('Bem-vindo ao sistema de avalia√ß√£o!', 'info');
            addNotification('Parab√©ns! Voc√™ foi aprovado(a) como avaliador(a) no evento "Feira de Inova√ß√£o 2025"!', 'aprovado-avaliador', { eventId: 'event-test-001', eventTitle: 'Feira de Inova√ß√£o 2025', recipientEmail: 'avaliador@example.com' });
            addNotification('Voc√™ tem um novo convite para colaborar em um projeto!', 'convite', { eventId: 'project-test-002', role: 'organizador_colab', projectId: 'proj-abc', team: 'Equipe Alpha' });
            // NOVO: Adicionado um convite de avaliador para testar o fluxo
            addNotification('Voc√™ foi convidado(a) para avaliar o evento "Confer√™ncia Tech 2025"!', 'convite', { eventId: 'event-test-004', eventTitle: 'Confer√™ncia Tech 2025', role: 'avaliador', recipientEmail: 'avaliador_convidado@example.com' });
        }
    }, [notifications.length, addNotification]);

    // L√≥gica para fechar o modal ao clicar fora do conte√∫do
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (modalContentRef.current && !modalContentRef.current.contains(event.target)) {
                onClose(); // Fecha o modal
            }
        };
        if (isOpen) {
            document.addEventListener('mousedown', handleClickOutside);
        } else {
            document.removeEventListener('mousedown', handleClickOutside);
        }
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [isOpen, onClose]);

    // L√≥gica para expandir/contrair a notifica√ß√£o e marc√°-la como lida
    const toggleExpand = (id) => {
        setExpandedNotificationId(prevId => {
            const nextExpandedId = prevId === id ? null : id;
            if (nextExpandedId !== null && nextExpandedId !== prevId) {
                markAsRead(id);
            }
            return nextExpandedId;
        });
    };

    // L√≥gica de Clique na Notifica√ß√£o Individual (APENAS EXPANDIR/MARCAR LIDA)
    const handleNotificationClick = (notif) => {
        markAsRead(notif.id);
        toggleExpand(notif.id);

        console.log(`Notifica√ß√£o clicada: ${notif.message} (Tipo: ${notif.type})`);

        // REMOVIDO: A navega√ß√£o imediata para 'convite' e 'aprovado-avaliador'.
        // A navega√ß√£o agora acontece APENAS ao clicar nos bot√µes 'Aceitar'/'Recusar'
        // ou se for um tipo de notifica√ß√£o que *sempre* navega ao clicar (ex: aprovado-avaliador).
        if (notif.type === 'aprovado-avaliador' && notif.details?.eventId) {
            // Este tipo de notifica√ß√£o ainda navega diretamente ao clicar no item
            navigate('/avaliar-projeto', { state: { eventId: notif.details.eventId } }); // <--- CORRIGIDO AQUI
            onClose(); // Fecha o modal ao navegar
        }
    };

    // L√≥gica para Aceitar/Recusar convite (bot√µes dentro da notifica√ß√£o expandida)
    const handleAcceptInvite = (e, notifId, details) => {
        e.stopPropagation(); // Previne que o clique no bot√£o feche/abra o item da notifica√ß√£o pai
        
        // Simula a l√≥gica de aceita√ß√£o (que no futuro interagiria com o EventProjectContext)
        addNotification(`Convite aceito para ${details.role === 'avaliador' ? 'avaliar' : 'organizar'}.`, 'info');
        markAsRead(notifId); // Marca como lida
        removeNotification(notifId); // Remove a notifica√ß√£o de convite

        setExpandedNotificationId(null); // Fecha a notifica√ß√£o expandida

        // NOVO: Navega para a p√°gina de avalia√ß√£o APENAS SE FOR UM CONVITE DE AVALIADOR ACEITO
        if (details.role === 'avaliador' && details.eventId) {
            navigate('/avaliar-projeto', { state: { eventId: details.eventId } }); // <--- CORRIGIDO AQUI
            onClose(); // Fecha o modal ap√≥s a navega√ß√£o
        } else if (details.role === 'organizador_colab' && details.projectId) {
            navigate('/gerenciar-eventos', { state: { projectId: notif.details.projectId } }); // Exemplo para organizador
            onClose();
        }
    };

    const handleDeclineInvite = (e, notifId, details) => {
        e.stopPropagation(); // Previne que o clique no bot√£o feche/abra o item da notifica√ß√£o pai
        addNotification(`Convite recusado para ${details.role === 'avaliador' ? 'avaliar' : 'organizar'}.`, 'alerta'); // Alerta para recusa
        markAsRead(notifId); // Marca como lida
        removeNotification(notifId); // Remove a notifica√ß√£o de convite
        setExpandedNotificationId(null);
    };

    const unreadCount = notifications.filter(n => !n.read).length;

    if (!isOpen) return null; // N√£o renderiza nada se o modal n√£o estiver aberto

    return (
        <div className="notification-modal-backdrop">
            <div className="notification-modal-content" ref={modalContentRef}>
                <button className="modal-close-btn" onClick={onClose}>&times;</button>
                <h3>Notifica√ß√µes ({unreadCount} n√£o lidas)</h3>
                <ul className="notification-list">
                    {notifications.length > 0 ? (
                        notifications.map(notif => {
                            const isExpanded = expandedNotificationId === notif.id;
                            return (
                                <li
                                    key={notif.id}
                                    className={`notification-item notification-${notif.type} ${notif.read ? 'read' : ''} ${isExpanded ? 'expanded' : ''}`}
                                    onClick={() => handleNotificationClick(notif)}
                                >
                                    <span className="notification-icon">
                                        {notif.type === 'convite' && '‚úâÔ∏è'}
                                        {notif.type === 'info' && '‚úÖ'}
                                        {notif.type === 'evento' && 'üóìÔ∏è'}
                                        {notif.type === 'alerta' && '‚ö†Ô∏è'}
                                        {notif.type === 'aprovado-avaliador' && 'üéâ'}
                                        {notif.type === 'rejeitado-avaliador' && '‚ùå'}
                                    </span>
                                    <div className="notification-content">
                                        {notif.message}
                                        <span className="notification-timestamp">{new Date(notif.timestamp).toLocaleString()}</span>
                                    </div>
                                    {/* Wrapper para os bot√µes de a√ß√£o direita */}
                                    <div className="notification-actions-right">
                                        <button
                                            className="remove-notification-btn"
                                            onClick={(e) => { e.stopPropagation(); removeNotification(notif.id); }}
                                        >
                                            &times;
                                        </button>
                                        <span className={`expand-icon ${isExpanded ? 'expanded' : ''}`} onClick={(e) => e.stopPropagation()}>&#9660;</span>
                                    </div>
                                    {isExpanded && (
                                        <div className="notification-expanded-content">
                                            <p className="expanded-details">
                                                {notif.type === 'convite' && notif.details?.role === 'avaliador' &&
                                                    `Detalhes: Voc√™ foi convidado para avaliar o Evento "${notif.details?.eventTitle || 'Evento Desconhecido'}". ` +
                                                    (notif.details?.additionalInfo ? `(${notif.details.additionalInfo})` : '')
                                                }
                                                {notif.type === 'aprovado-avaliador' &&
                                                    `Parab√©ns! Voc√™ foi aprovado(a) como avaliador(a) no evento "${notif.details?.eventTitle || 'Evento Desconhecido'}". Clique nesta notifica√ß√£o para ir √† tela de avalia√ß√£o.`
                                                }
                                                {notif.type === 'rejeitado-avaliador' &&
                                                    `Sua solicita√ß√£o para avaliar o evento "${notif.details?.eventTitle || 'Evento Desconhecido'}" foi analisada.`
                                                }
                                                {notif.type === 'convite' && notif.details?.role === 'organizador_colab' &&
                                                    `Detalhes: Voc√™ foi convidado para colaborar no projeto "${notif.details?.projectId || 'Projeto Desconhecido'}". ` +
                                                    (notif.details?.team ? `(Equipe: ${notif.details.team})` : '')
                                                }
                                                {!['convite', 'aprovado-avaliador', 'rejeitado-avaliador'].includes(notif.type) && `Mais informa√ß√µes sobre esta notifica√ß√£o do tipo '${notif.type}'.`}
                                            </p>
                                            {notif.type === 'convite' && (
                                                <div className="notification-actions-buttons">
                                                    <button
                                                    className="btn-accept"
                                                        onClick={(e) => handleAcceptInvite(e, notif.id, notif.details)}
                                                    >
                                                        Aceitar
                                                    </button>
                                                    <button
                                                        className="btn-decline"
                                                        onClick={(e) => handleDeclineInvite(e, notif.id, notif.details)}
                                                    >
                                                        Recusar
                                                    </button>
                                                </div>
                                            )}
                                        </div>
                                    )}
                                </li>
                            );
                        })
                    ) : (
                        <p className="no-notifications">Nenhuma notifica√ß√£o por enquanto.</p>
                    )}
                </ul>
            </div>
        </div>
    );
}